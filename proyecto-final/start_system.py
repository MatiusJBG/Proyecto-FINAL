#!/usr/bin/env python3
"""
Script de inicio r√°pido para el Sistema de Gesti√≥n de Estudiantes
"""

import os
import sys
import subprocess
import time
import webbrowser
from pathlib import Path

def check_dependencies():
    """Verificar que las dependencias est√©n instaladas"""
    print("üîç Verificando dependencias...")
    
    # Verificar Python
    if sys.version_info < (3, 7):
        print("‚ùå Se requiere Python 3.7 o superior")
        return False
    
    # Verificar Node.js
    try:
        subprocess.run(['node', '--version'], check=True, capture_output=True)
        print("‚úÖ Node.js encontrado")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Node.js no encontrado. Por favor inst√°lalo desde https://nodejs.org/")
        return False
    
    # Verificar npm
    try:
        subprocess.run(['npm', '--version'], check=True, capture_output=True)
        print("‚úÖ npm encontrado")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå npm no encontrado")
        return False
    
    return True

def check_env_file():
    """Verificar y crear archivo .env si no existe"""
    env_file = Path('.env')
    if not env_file.exists():
        print("üìù Creando archivo .env...")
        env_content = """DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=proyecto
"""
        with open(env_file, 'w') as f:
            f.write(env_content)
        print("‚úÖ Archivo .env creado. Por favor ed√≠talo con tus credenciales de MySQL")
        return False
    return True

def install_python_dependencies():
    """Instalar dependencias de Python"""
    print("üì¶ Instalando dependencias de Python...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', 
                       'flask', 'flask-cors', 'mysql-connector-python', 'python-dotenv'], 
                       check=True)
        print("‚úÖ Dependencias de Python instaladas")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias de Python: {e}")
        return False

def install_node_dependencies():
    """Instalar dependencias de Node.js"""
    print("üì¶ Instalando dependencias de Node.js...")
    try:
        subprocess.run(['npm', 'install'], check=True)
        print("‚úÖ Dependencias de Node.js instaladas")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias de Node.js: {e}")
        return False

def start_backend():
    """Iniciar el servidor backend"""
    print("üöÄ Iniciando servidor backend...")
    try:
        # Iniciar Flask en segundo plano
        process = subprocess.Popen([sys.executable, 'app.py'])
        time.sleep(3)  # Esperar a que Flask se inicie
        return process
    except Exception as e:
        print(f"‚ùå Error iniciando backend: {e}")
        return None

def start_frontend():
    """Iniciar el servidor frontend"""
    print("üöÄ Iniciando servidor frontend...")
    try:
        # Iniciar React en segundo plano
        process = subprocess.Popen(['npm', 'start'])
        time.sleep(5)  # Esperar a que React se inicie
        return process
    except Exception as e:
        print(f"‚ùå Error iniciando frontend: {e}")
        return None

def main():
    """Funci√≥n principal"""
    print("üéì Sistema de Gesti√≥n de Estudiantes")
    print("=" * 50)
    
    # Verificar dependencias
    if not check_dependencies():
        print("\n‚ùå Por favor instala las dependencias faltantes y vuelve a intentar")
        return
    
    # Verificar archivo .env
    if not check_env_file():
        print("\n‚ö†Ô∏è  Por favor configura el archivo .env con tus credenciales de MySQL")
        print("   Luego ejecuta este script nuevamente")
        return
    
    # Instalar dependencias si es necesario
    print("\nüì¶ Verificando dependencias instaladas...")
    
    # Intentar importar Flask para verificar si est√° instalado
    try:
        import flask
        print("‚úÖ Flask ya est√° instalado")
    except ImportError:
        print("üì¶ Flask no encontrado, instalando...")
        if not install_python_dependencies():
            return
    
    # Verificar si node_modules existe
    if not Path('node_modules').exists():
        if not install_node_dependencies():
            return
    else:
        print("‚úÖ Dependencias de Node.js ya est√°n instaladas")
    
    print("\nüöÄ Iniciando sistema...")
    
    # Iniciar backend
    backend_process = start_backend()
    if not backend_process:
        print("‚ùå No se pudo iniciar el backend")
        return
    
    # Iniciar frontend
    frontend_process = start_frontend()
    if not frontend_process:
        print("‚ùå No se pudo iniciar el frontend")
        backend_process.terminate()
        return
    
    print("\n‚úÖ Sistema iniciado correctamente!")
    print("\nüì± Servicios disponibles:")
    print("   ‚Ä¢ Frontend: http://localhost:3000")
    print("   ‚Ä¢ Backend API: http://localhost:5000")
    print("   ‚Ä¢ API Health Check: http://localhost:5000/api/ping")
    
    print("\nüë§ Datos de prueba:")
    print("   ‚Ä¢ Estudiante: juan.perez@estudiante.edu / est123")
    print("   ‚Ä¢ Profesor: maria.gonzalez@universidad.edu / prof123")
    print("   ‚Ä¢ Admin: admin@universidad.edu / admin123")
    
    print("\nüåê Abriendo navegador...")
    time.sleep(2)
    webbrowser.open('http://localhost:3000')
    
    print("\n‚èπÔ∏è  Para detener el sistema, presiona Ctrl+C")
    
    try:
        # Mantener el script ejecut√°ndose
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë Deteniendo sistema...")
        backend_process.terminate()
        frontend_process.terminate()
        print("‚úÖ Sistema detenido")

if __name__ == "__main__":
    main() 