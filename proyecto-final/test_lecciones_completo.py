#!/usr/bin/env python3
"""
Script completo para probar todas las funcionalidades de lecciones:
- Crear lecciones
- Editar lecciones
- Eliminar lecciones
- Validaciones de dependencias
"""

import requests
import json

BASE_URL = "http://localhost:5000/api"

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def print_success(message):
    print(f"‚úÖ {message}")

def print_error(message):
    print(f"‚ùå {message}")

def print_warning(message):
    print(f"‚ö†Ô∏è  {message}")

def test_lecciones_completo():
    """Prueba completa de todas las funcionalidades de lecciones"""
    
    print_info("Iniciando prueba completa de funcionalidades de lecciones...")
    
    # 1. Verificar servidor
    try:
        response = requests.get(f"{BASE_URL}/ping")
        if response.status_code == 200:
            print_success("Servidor funcionando")
        else:
            print_error("Servidor no responde")
            return False
    except Exception as e:
        print_error(f"Error de conexi√≥n: {e}")
        return False
    
    # 2. Obtener curso para pruebas
    try:
        response = requests.get(f"{BASE_URL}/cursos")
        if response.status_code == 200:
            cursos = response.json()
            if not cursos:
                print_error("No hay cursos disponibles")
                return False
            
            curso = cursos[0]
            curso_id = curso['ID_Curso']
            print_success(f"Curso de prueba: {curso['Nombre']} (ID: {curso_id})")
        else:
            print_error("No se pudieron obtener cursos")
            return False
    except Exception as e:
        print_error(f"Error obteniendo cursos: {e}")
        return False
    
    # 3. Crear un m√≥dulo de prueba
    nuevo_modulo = {
        "nombre": "M√≥dulo Test Lecciones",
        "descripcion": "M√≥dulo para probar funcionalidades de lecciones",
        "duracion_estimada": 60
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/cursos/{curso_id}/modulos",
            json=nuevo_modulo,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 201:
            modulo_creado = response.json()
            modulo_id = modulo_creado['modulo']['ID_Modulo']
            print_success(f"M√≥dulo creado: {modulo_creado['modulo']['Nombre']} (ID: {modulo_id})")
        else:
            print_error(f"Error creando m√≥dulo: {response.text}")
            return False
    except Exception as e:
        print_error(f"Error en creaci√≥n de m√≥dulo: {e}")
        return False
    
    # 4. Crear lecci√≥n de prueba
    nueva_leccion = {
        "nombre": "Lecci√≥n Test Inicial",
        "descripcion": "Lecci√≥n inicial para pruebas",
        "contenido": "Contenido de la lecci√≥n de prueba",
        "duracion_estimada": 30,
        "es_obligatoria": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/modulos/{modulo_id}/lecciones",
            json=nueva_leccion,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 201:
            leccion_creada = response.json()
            leccion_id = leccion_creada['leccion']['ID_Leccion']
            print_success(f"Lecci√≥n creada: {leccion_creada['leccion']['Nombre']} (ID: {leccion_id})")
        else:
            print_error(f"Error creando lecci√≥n: {response.text}")
            return False
    except Exception as e:
        print_error(f"Error en creaci√≥n de lecci√≥n: {e}")
        return False
    
    # 5. Verificar que la lecci√≥n aparece en la estructura
    try:
        response = requests.get(f"{BASE_URL}/cursos/{curso_id}/modulos")
        if response.status_code == 200:
            modulos = response.json()
            modulo_encontrado = next((m for m in modulos if m['ID_Modulo'] == modulo_id), None)
            
            if modulo_encontrado and 'lecciones' in modulo_encontrado:
                lecciones = modulo_encontrado['lecciones']
                leccion_encontrada = next((l for l in lecciones if l['ID_Leccion'] == leccion_id), None)
                
                if leccion_encontrada:
                    print_success("Lecci√≥n verificada en la estructura de m√≥dulos")
                    print(f"   üìÑ {leccion_encontrada['Nombre']}")
                    print(f"   üìù Descripci√≥n: {leccion_encontrada.get('Descripcion', 'Sin descripci√≥n')}")
                    print(f"   ‚è±Ô∏è  Duraci√≥n: {leccion_encontrada.get('Duracion_estimada', 0)} min")
                    print(f"   üìã Obligatoria: {'S√≠' if leccion_encontrada.get('Es_obligatoria') else 'No'}")
                else:
                    print_error("Lecci√≥n no encontrada en la estructura")
                    return False
            else:
                print_error("M√≥dulo no encontrado o sin lecciones")
                return False
        else:
            print_error("Error obteniendo estructura de m√≥dulos")
            return False
    except Exception as e:
        print_error(f"Error verificando estructura: {e}")
        return False
    
    # 6. Editar la lecci√≥n
    leccion_editada = {
        "nombre": "Lecci√≥n Test Editada",
        "descripcion": "Lecci√≥n editada para pruebas",
        "contenido": "Contenido actualizado de la lecci√≥n",
        "duracion_estimada": 45,
        "es_obligatoria": False
    }
    
    try:
        response = requests.put(
            f"{BASE_URL}/lecciones/{leccion_id}",
            json=leccion_editada,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            print_success(f"Lecci√≥n editada: {response.json()['message']}")
        else:
            print_error(f"Error editando lecci√≥n: {response.text}")
            return False
    except Exception as e:
        print_error(f"Error en edici√≥n de lecci√≥n: {e}")
        return False
    
    # 7. Verificar que los cambios se aplicaron
    try:
        response = requests.get(f"{BASE_URL}/cursos/{curso_id}/modulos")
        if response.status_code == 200:
            modulos = response.json()
            modulo_encontrado = next((m for m in modulos if m['ID_Modulo'] == modulo_id), None)
            
            if modulo_encontrado and 'lecciones' in modulo_encontrado:
                lecciones = modulo_encontrado['lecciones']
                leccion_encontrada = next((l for l in lecciones if l['ID_Leccion'] == leccion_id), None)
                
                if leccion_encontrada:
                    print_success("Cambios verificados en la lecci√≥n:")
                    print(f"   üìÑ Nombre: {leccion_encontrada['Nombre']}")
                    print(f"   üìù Descripci√≥n: {leccion_encontrada.get('Descripcion', 'Sin descripci√≥n')}")
                    print(f"   ‚è±Ô∏è  Duraci√≥n: {leccion_encontrada.get('Duracion_estimada', 0)} min")
                    print(f"   üìã Obligatoria: {'S√≠' if leccion_encontrada.get('Es_obligatoria') else 'No'}")
                else:
                    print_error("Lecci√≥n no encontrada despu√©s de editar")
                    return False
            else:
                print_error("M√≥dulo no encontrado despu√©s de editar")
                return False
        else:
            print_error("Error obteniendo estructura despu√©s de editar")
            return False
    except Exception as e:
        print_error(f"Error verificando cambios: {e}")
        return False
    
    # 8. Crear una evaluaci√≥n para probar validaci√≥n de eliminaci√≥n
    nueva_evaluacion = {
        "nombre": "Evaluaci√≥n Test",
        "descripcion": "Evaluaci√≥n para probar validaci√≥n",
        "puntaje_aprobacion": 70,
        "max_intentos": 3
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/lecciones/{leccion_id}/evaluaciones",
            json=nueva_evaluacion,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 201:
            evaluacion_creada = response.json()
            evaluacion_id = evaluacion_creada['evaluacion']['ID_Evaluacion']
            print_success(f"Evaluaci√≥n creada: {evaluacion_creada['evaluacion']['Nombre']} (ID: {evaluacion_id})")
        else:
            print_error(f"Error creando evaluaci√≥n: {response.text}")
            return False
    except Exception as e:
        print_error(f"Error en creaci√≥n de evaluaci√≥n: {e}")
        return False
    
    # 9. Intentar eliminar lecci√≥n con evaluaci√≥n (debe fallar)
    try:
        response = requests.delete(f"{BASE_URL}/lecciones/{leccion_id}")
        if response.status_code == 400:
            error_msg = response.json()['error']
            print_warning(f"Validaci√≥n funcionando: {error_msg}")
        else:
            print_error("La validaci√≥n no funcion√≥ como esperado")
            return False
    except Exception as e:
        print_error(f"Error probando validaci√≥n: {e}")
        return False
    
    # 10. Eliminar la evaluaci√≥n primero
    try:
        response = requests.delete(f"{BASE_URL}/evaluaciones/{evaluacion_id}")
        if response.status_code == 200:
            print_success("Evaluaci√≥n eliminada correctamente")
        else:
            print_warning(f"No se pudo eliminar evaluaci√≥n: {response.text}")
    except Exception as e:
        print_warning(f"Error eliminando evaluaci√≥n: {e}")
    
    # 11. Ahora eliminar la lecci√≥n
    try:
        response = requests.delete(f"{BASE_URL}/lecciones/{leccion_id}")
        if response.status_code == 200:
            print_success(f"Lecci√≥n eliminada: {response.json()['message']}")
        else:
            print_error(f"Error eliminando lecci√≥n: {response.text}")
            return False
    except Exception as e:
        print_error(f"Error en eliminaci√≥n de lecci√≥n: {e}")
        return False
    
    # 12. Verificar que la lecci√≥n fue eliminada
    try:
        response = requests.get(f"{BASE_URL}/cursos/{curso_id}/modulos")
        if response.status_code == 200:
            modulos = response.json()
            modulo_encontrado = next((m for m in modulos if m['ID_Modulo'] == modulo_id), None)
            
            if modulo_encontrado and 'lecciones' in modulo_encontrado:
                lecciones = modulo_encontrado['lecciones']
                leccion_encontrada = next((l for l in lecciones if l['ID_Leccion'] == leccion_id), None)
                
                if not leccion_encontrada:
                    print_success("Lecci√≥n eliminada correctamente de la estructura")
                else:
                    print_error("Lecci√≥n a√∫n aparece en la estructura")
                    return False
            else:
                print_error("M√≥dulo no encontrado despu√©s de eliminar lecci√≥n")
                return False
        else:
            print_error("Error obteniendo estructura despu√©s de eliminar")
            return False
    except Exception as e:
        print_error(f"Error verificando eliminaci√≥n: {e}")
        return False
    
    # 13. Limpiar - eliminar el m√≥dulo de prueba
    try:
        response = requests.delete(f"{BASE_URL}/modulos/{modulo_id}")
        if response.status_code == 200:
            print_success(f"M√≥dulo eliminado: {response.json()['message']}")
        else:
            print_warning(f"No se pudo eliminar m√≥dulo: {response.text}")
    except Exception as e:
        print_warning(f"Error eliminando m√≥dulo: {e}")
    
    print_success("üéâ ¬°Prueba completa de lecciones exitosa!")
    print_info("üìã Todas las funcionalidades funcionan correctamente:")
    print_info("   ‚úÖ Crear lecciones")
    print_info("   ‚úÖ Editar lecciones")
    print_info("   ‚úÖ Eliminar lecciones")
    print_info("   ‚úÖ Validaciones de dependencias")
    print_info("   ‚úÖ Estructura anidada")
    
    return True

if __name__ == "__main__":
    test_lecciones_completo() 