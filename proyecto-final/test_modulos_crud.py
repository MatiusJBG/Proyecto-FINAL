#!/usr/bin/env python3
"""
Script para probar la creaci√≥n y eliminaci√≥n de m√≥dulos
"""

import requests
import json
import time

# Configuraci√≥n
BASE_URL = "http://localhost:5000/api"

def test_crear_eliminar_modulos():
    """Prueba crear y eliminar m√≥dulos"""
    print("üöÄ Probando CRUD de m√≥dulos: Crear ‚Üí Verificar ‚Üí Eliminar")
    print("=" * 60)
    
    # 1. Obtener un curso existente
    print("üìö Obteniendo curso existente...")
    try:
        response = requests.get(f"{BASE_URL}/cursos")
        if response.status_code == 200:
            cursos = response.json()
            if cursos:
                curso = cursos[0]  # Usar el primer curso
                curso_id = curso['ID_Curso']
                print(f"‚úÖ Usando curso: {curso['Nombre']} (ID: {curso_id})")
            else:
                print("‚ùå No hay cursos disponibles")
                return
        else:
            print(f"‚ùå Error al obtener cursos: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # 2. Verificar m√≥dulos existentes
    print(f"\nüîç Verificando m√≥dulos existentes en curso {curso_id}...")
    try:
        response = requests.get(f"{BASE_URL}/cursos/{curso_id}/modulos")
        if response.status_code == 200:
            modulos_iniciales = response.json()
            print(f"‚úÖ M√≥dulos existentes: {len(modulos_iniciales)}")
            for modulo in modulos_iniciales:
                print(f"   üìñ {modulo['Nombre']} (ID: {modulo['ID_Modulo']})")
        else:
            print(f"‚ùå Error al obtener m√≥dulos: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # 3. Crear m√≥dulo de prueba
    print(f"\nüîß Creando m√≥dulo de prueba...")
    modulo_data = {
        "nombre": "M√≥dulo de Prueba CRUD",
        "descripcion": "Este m√≥dulo ser√° eliminado para probar la funcionalidad",
        "duracion_estimada": 30
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/cursos/{curso_id}/modulos",
            json=modulo_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 201:
            result = response.json()
            modulo_id = result['modulo']['ID_Modulo']
            print(f"‚úÖ M√≥dulo creado: {result['modulo']['Nombre']} (ID: {modulo_id})")
        else:
            print(f"‚ùå Error al crear m√≥dulo: {response.status_code}")
            print(f"üìÑ Respuesta: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # 4. Verificar que el m√≥dulo se cre√≥
    print(f"\nüîç Verificando que el m√≥dulo se cre√≥...")
    try:
        response = requests.get(f"{BASE_URL}/cursos/{curso_id}/modulos")
        if response.status_code == 200:
            modulos_despues_crear = response.json()
            modulo_encontrado = next((m for m in modulos_despues_crear if m['ID_Modulo'] == modulo_id), None)
            if modulo_encontrado:
                print(f"‚úÖ M√≥dulo verificado: {modulo_encontrado['Nombre']}")
                print(f"   Total m√≥dulos ahora: {len(modulos_despues_crear)}")
            else:
                print(f"‚ùå M√≥dulo no encontrado despu√©s de crear")
                return
        else:
            print(f"‚ùå Error al verificar m√≥dulos: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # 5. Intentar eliminar el m√≥dulo
    print(f"\nüóëÔ∏è  Eliminando m√≥dulo {modulo_id}...")
    try:
        response = requests.delete(f"{BASE_URL}/modulos/{modulo_id}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ M√≥dulo eliminado: {result['message']}")
        else:
            print(f"‚ùå Error al eliminar m√≥dulo: {response.status_code}")
            print(f"üìÑ Respuesta: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # 6. Verificar que el m√≥dulo se elimin√≥
    print(f"\nüîç Verificando que el m√≥dulo se elimin√≥...")
    try:
        response = requests.get(f"{BASE_URL}/cursos/{curso_id}/modulos")
        if response.status_code == 200:
            modulos_finales = response.json()
            modulo_encontrado = next((m for m in modulos_finales if m['ID_Modulo'] == modulo_id), None)
            if not modulo_encontrado:
                print(f"‚úÖ M√≥dulo eliminado correctamente")
                print(f"   Total m√≥dulos final: {len(modulos_finales)}")
            else:
                print(f"‚ùå M√≥dulo a√∫n existe despu√©s de eliminar")
                return
        else:
            print(f"‚ùå Error al verificar m√≥dulos: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    print(f"\nüéâ ¬°Prueba CRUD completada exitosamente!")
    print(f"üìã Resumen:")
    print(f"   ‚úÖ Creaci√≥n de m√≥dulo: Funciona")
    print(f"   ‚úÖ Verificaci√≥n de m√≥dulo: Funciona")
    print(f"   ‚úÖ Eliminaci√≥n de m√≥dulo: Funciona")
    print(f"   ‚úÖ Verificaci√≥n de eliminaci√≥n: Funciona")

def test_eliminar_modulo_con_lecciones():
    """Prueba eliminar un m√≥dulo que tiene lecciones (debe fallar)"""
    print("\n" + "=" * 60)
    print("üß™ Probando eliminar m√≥dulo con lecciones (debe fallar)")
    print("=" * 60)
    
    # 1. Obtener un curso con m√≥dulos que tengan lecciones
    print("üìö Buscando m√≥dulo con lecciones...")
    try:
        response = requests.get(f"{BASE_URL}/cursos")
        if response.status_code == 200:
            cursos = response.json()
            if not cursos:
                print("‚ùå No hay cursos disponibles")
                return
            
            # Buscar un m√≥dulo con lecciones
            for curso in cursos:
                curso_id = curso['ID_Curso']
                response = requests.get(f"{BASE_URL}/cursos/{curso_id}/modulos")
                if response.status_code == 200:
                    modulos = response.json()
                    for modulo in modulos:
                        if modulo.get('lecciones') and len(modulo['lecciones']) > 0:
                            print(f"‚úÖ Encontrado m√≥dulo con lecciones: {modulo['Nombre']} (ID: {modulo['ID_Modulo']})")
                            print(f"   Lecciones: {len(modulo['lecciones'])}")
                            
                            # Intentar eliminar el m√≥dulo
                            print(f"\nüóëÔ∏è  Intentando eliminar m√≥dulo con lecciones...")
                            delete_response = requests.delete(f"{BASE_URL}/modulos/{modulo['ID_Modulo']}")
                            
                            if delete_response.status_code == 400:
                                result = delete_response.json()
                                print(f"‚úÖ Correcto: No se pudo eliminar: {result['error']}")
                                return
                            else:
                                print(f"‚ùå Error: Se elimin√≥ un m√≥dulo con lecciones (no deber√≠a)")
                                return
            
            print("‚ùå No se encontraron m√≥dulos con lecciones")
        else:
            print(f"‚ùå Error al obtener cursos: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return

def main():
    """Funci√≥n principal"""
    test_crear_eliminar_modulos()
    test_eliminar_modulo_con_lecciones()

if __name__ == "__main__":
    main() 