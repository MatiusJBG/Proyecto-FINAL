#!/usr/bin/env python3
"""
Script de prueba para verificar los cambios realizados
"""

import requests
import json

# Configuraci√≥n
BASE_URL = "http://localhost:5000/api"

def test_backend_connection():
    """Prueba la conexi√≥n al backend"""
    try:
        response = requests.get(f"{BASE_URL}/ping")
        if response.status_code == 200:
            print("‚úÖ Backend conectado correctamente")
            return True
        else:
            print("‚ùå Backend no responde correctamente")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando al backend: {e}")
        return False

def test_get_courses():
    """Prueba obtener cursos"""
    try:
        response = requests.get(f"{BASE_URL}/cursos")
        if response.status_code == 200:
            courses = response.json()
            print(f"‚úÖ Cursos obtenidos: {len(courses)} cursos encontrados")
            return courses
        else:
            print(f"‚ùå Error obteniendo cursos: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Error en test_get_courses: {e}")
        return []

def test_get_modules(course_id):
    """Prueba obtener m√≥dulos de un curso"""
    try:
        response = requests.get(f"{BASE_URL}/cursos/{course_id}/modulos")
        if response.status_code == 200:
            modules = response.json()
            print(f"‚úÖ M√≥dulos obtenidos para curso {course_id}: {len(modules)} m√≥dulos")
            return modules
        else:
            print(f"‚ùå Error obteniendo m√≥dulos: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Error en test_get_modules: {e}")
        return []

def test_create_module(course_id):
    """Prueba crear un m√≥dulo"""
    try:
        module_data = {
            "nombre": "M√≥dulo de Prueba",
            "descripcion": "Este es un m√≥dulo de prueba creado autom√°ticamente",
            "duracion_estimada": 120
        }
        
        response = requests.post(
            f"{BASE_URL}/cursos/{course_id}/modulos",
            json=module_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 201:
            result = response.json()
            print(f"‚úÖ M√≥dulo creado exitosamente: {result['modulo']['Nombre']}")
            return result['modulo']['ID_Modulo']
        else:
            print(f"‚ùå Error creando m√≥dulo: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error en test_create_module: {e}")
        return None

def test_create_lesson(module_id):
    """Prueba crear una lecci√≥n"""
    try:
        lesson_data = {
            "nombre": "Lecci√≥n de Prueba",
            "descripcion": "Esta es una lecci√≥n de prueba",
            "contenido": "Contenido de la lecci√≥n de prueba",
            "duracion_estimada": 45,
            "es_obligatoria": True
        }
        
        response = requests.post(
            f"{BASE_URL}/modulos/{module_id}/lecciones",
            json=lesson_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 201:
            result = response.json()
            print(f"‚úÖ Lecci√≥n creada exitosamente: {result['leccion']['Nombre']}")
            return result['leccion']['ID_Leccion']
        else:
            print(f"‚ùå Error creando lecci√≥n: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error en test_create_lesson: {e}")
        return None

def test_create_evaluation(lesson_id):
    """Prueba crear una evaluaci√≥n"""
    try:
        evaluation_data = {
            "nombre": "Evaluaci√≥n de Prueba",
            "descripcion": "Esta es una evaluaci√≥n de prueba",
            "puntaje_aprobacion": 70.0,
            "max_intentos": 3
        }
        
        response = requests.post(
            f"{BASE_URL}/lecciones/{lesson_id}/evaluaciones",
            json=evaluation_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 201:
            result = response.json()
            print(f"‚úÖ Evaluaci√≥n creada exitosamente: {result['evaluacion']['Nombre']}")
            return result['evaluacion']['ID_Evaluacion']
        else:
            print(f"‚ùå Error creando evaluaci√≥n: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error en test_create_evaluation: {e}")
        return None

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas de los cambios realizados...")
    print("=" * 50)
    
    # Prueba 1: Conexi√≥n al backend
    if not test_backend_connection():
        print("‚ùå No se puede continuar sin conexi√≥n al backend")
        return
    
    print()
    
    # Prueba 2: Obtener cursos
    courses = test_get_courses()
    if not courses:
        print("‚ùå No se pueden realizar m√°s pruebas sin cursos")
        return
    
    print()
    
    # Usar el primer curso para las pruebas
    first_course = courses[0]
    course_id = first_course['ID_Curso']
    print(f"üìö Usando curso: {first_course['Nombre']} (ID: {course_id})")
    print()
    
    # Prueba 3: Obtener m√≥dulos
    modules = test_get_modules(course_id)
    print()
    
    # Prueba 4: Crear m√≥dulo
    new_module_id = test_create_module(course_id)
    if new_module_id:
        print()
        
        # Prueba 5: Crear lecci√≥n
        new_lesson_id = test_create_lesson(new_module_id)
        if new_lesson_id:
            print()
            
            # Prueba 6: Crear evaluaci√≥n
            test_create_evaluation(new_lesson_id)
    
    print()
    print("=" * 50)
    print("‚úÖ Pruebas completadas")
    print()
    print("üìã Resumen de cambios realizados:")
    print("1. ‚úÖ Eliminados alerts y reemplazados por notificaciones")
    print("2. ‚úÖ Bot√≥n 'Gestionar' ahora navega a nueva interfaz")
    print("3. ‚úÖ Agregados endpoints para crear m√≥dulos, lecciones y evaluaciones")
    print("4. ‚úÖ Los datos se guardan en la base de datos")
    print("5. ‚úÖ Arreglados errores de linter en models.py")

if __name__ == "__main__":
    main() 